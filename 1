// Enhanced version with CSV import, local storage, dynamic recipe filtering, and family preferences, including scaling based on family size, unit conversion, and auto-generated portion size

import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';
import Papa from 'papaparse';
import localforage from 'localforage';

const convertUnits = (amount, unit) => {
  if (unit === 'g' && amount >= 1000) return { amount: amount / 1000, unit: 'kg' };
  if (unit === 'ml' && amount >= 1000) return { amount: amount / 1000, unit: 'l' };
  return { amount, unit };
};

function Recipes() {
  const [recipes, setRecipes] = useState([]);

  useEffect(() => {
    localforage.getItem('recipes').then((data) => {
      if (data) setRecipes(data);
    });
  }, []);

  const handleCSVUpload = (e) => {
    const file = e.target.files[0];
    Papa.parse(file, {
      header: true,
      complete: (results) => {
        const cleaned = results.data.filter(r => r['Recipe Name']);
        setRecipes(cleaned);
        localforage.setItem('recipes', cleaned);
      },
    });
  };

  return (
    <div className="p-4">
      <h2 className="text-xl font-semibold mb-2">Upload Recipes (CSV)</h2>
      <input type="file" accept=".csv" onChange={handleCSVUpload} className="mb-4" />
      <ul className="list-disc pl-4">
        {recipes.map((r, i) => (
          <li key={i}>{r['Recipe Name']}</li>
        ))}
      </ul>
    </div>
  );
}

function Inventory() {
  const [inventory, setInventory] = useState('');

  useEffect(() => {
    localforage.getItem('inventory').then((data) => {
      if (data) setInventory(data);
    });
  }, []);

  const handleSave = () => {
    localforage.setItem('inventory', inventory);
  };

  return (
    <div className="p-4">
      <h2 className="text-xl font-semibold mb-2">Enter Inventory (comma separated)</h2>
      <textarea
        className="w-full border p-2"
        rows={5}
        value={inventory}
        onChange={(e) => setInventory(e.target.value)}
      />
      <button onClick={handleSave} className="mt-2 bg-blue-500 text-white px-4 py-2 rounded">Save</button>
    </div>
  );
}

function FamilyPreferences() {
  const [prefs, setPrefs] = useState('');
  const [size, setSize] = useState(4);

  useEffect(() => {
    localforage.getItem('preferences').then((data) => {
      if (data) setPrefs(data);
    });
    localforage.getItem('familySize').then((s) => {
      if (s) setSize(s);
    });
  }, []);

  const handleSave = () => {
    localforage.setItem('preferences', prefs);
    localforage.setItem('familySize', size);
  };

  return (
    <div className="p-4">
      <h2 className="text-xl font-semibold mb-2">Family Preferences (e.g. vegetarian, allergies)</h2>
      <textarea
        className="w-full border p-2"
        rows={4}
        value={prefs}
        onChange={(e) => setPrefs(e.target.value)}
      />
      <h2 className="text-xl font-semibold mt-4 mb-2">Family Size</h2>
      <input
        type="number"
        className="w-full border p-2"
        value={size}
        onChange={(e) => setSize(parseInt(e.target.value))}
      />
      <button onClick={handleSave} className="mt-2 bg-blue-500 text-white px-4 py-2 rounded">Save</button>
    </div>
  );
}

function MealPlan() {
  const [recipes, setRecipes] = useState([]);
  const [inventory, setInventory] = useState('');
  const [prefs, setPrefs] = useState('');
  const [plan, setPlan] = useState([]);

  useEffect(() => {
    Promise.all([
      localforage.getItem('recipes'),
      localforage.getItem('inventory'),
      localforage.getItem('preferences'),
    ]).then(([r, i, p]) => {
      if (r && i) {
        const inventoryItems = i.toLowerCase().split(',').map(s => s.trim());
        const validRecipes = r.filter(recipe => {
          const ing = recipe['Ingredients']?.toLowerCase() || '';
          const tags = recipe['Tags']?.toLowerCase() || '';
          const matchInventory = inventoryItems.every(item => ing.includes(item));
          const matchPrefs = !p || tags.includes(p.toLowerCase());
          return matchInventory && matchPrefs;
        });
        setPlan(validRecipes.slice(0, 7));
        localforage.setItem('mealPlan', validRecipes.slice(0, 7));
      }
    });
  }, []);

  return (
    <div className="p-4">
      <h2 className="text-xl font-semibold mb-2">This Weekâ€™s Meals</h2>
      <ul className="list-disc pl-4">
        {plan.map((r, i) => (
          <li key={i}>{r['Recipe Name']}</li>
        ))}
      </ul>
    </div>
  );
}

function ShoppingList() {
  const [recipes, setRecipes] = useState([]);
  const [inventory, setInventory] = useState('');
  const [missing, setMissing] = useState([]);
  const [familySize, setFamilySize] = useState(4);

  useEffect(() => {
    Promise.all([
      localforage.getItem('mealPlan'),
      localforage.getItem('inventory'),
      localforage.getItem('familySize'),
    ]).then(([r, i, f]) => {
      if (r && i) {
        const inventoryItems = i.toLowerCase().split(',').map(s => s.trim());
        const portionMultiplier = parseInt(f) || 4;
        const needed = {};

        r.forEach(recipe => {
          const ingList = (recipe['Ingredients'] || '').split(',');
          ingList.forEach(line => {
            const match = line.match(/(.+?)\((\d+\.?\d*)\s*(g|ml|kg|l|pcs)\)/);
            if (match) {
              const name = match[1].trim().toLowerCase();
              let amount = parseFloat(match[2]) * portionMultiplier;
              let unit = match[3];
              if (!inventoryItems.includes(name)) {
                if (!needed[name]) needed[name] = { total: 0, unit };
                needed[name].total += amount;
              }
            }
          });
        });

        const missingList = Object.entries(needed).map(([name, val]) => {
          const { amount, unit } = convertUnits(val.total, val.unit);
          return `${name} (${amount.toFixed(2)} ${unit})`;
        });
        setMissing(missingList);
      }
    });
  }, []);

  return (
    <div className="p-4">
      <h2 className="text-xl font-semibold mb-2">Shopping List</h2>
      <ul className="list-disc pl-4">
        {missing.map((item, i) => (
          <li key={i}>{item}</li>
        ))}
      </ul>
    </div>
  );
}

function Home() {
  return (
    <div className="max-w-md mx-auto p-4">
      <h1 className="text-3xl font-bold mb-6">Meal Planner</h1>
      <div className="flex flex-col space-y-3">
        <Link to="/recipes" className="rounded border p-3 text-center hover:bg-gray-100">Recipes</Link>
        <Link to="/inventory" className="rounded border p-3 text-center hover:bg-gray-100">Inventory</Link>
        <Link to="/preferences" className="rounded border p-3 text-center hover:bg-gray-100">Preferences</Link>
        <Link to="/meal-plan" className="rounded border p-3 text-center hover:bg-gray-100">Meal Plan</Link>
        <Link to="/shopping-list" className="rounded border p-3 text-center hover:bg-gray-100">Shopping List</Link>
      </div>
    </div>
  );
}

export default function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/recipes" element={<Recipes />} />
        <Route path="/inventory" element={<Inventory />} />
        <Route path="/preferences" element={<FamilyPreferences />} />
        <Route path="/meal-plan" element={<MealPlan />} />
        <Route path="/shopping-list" element={<ShoppingList />} />
      </Routes>
    </Router>
  );
}
